// automatically generated by Xtext
grammar es.uah.aut.srg.micobs.svm.lang.svs.SVS with org.eclipse.xtext.common.Terminals

import "http://srg.aut.uah.es/micobs/svm/svs" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

import "http://srg.aut.uah.es/micobs/svm/vdm" as vdm
import "http://srg.aut.uah.es/micobs/svm/tdm" as tdm
import "http://srg.aut.uah.es/micobs/doctpl/doctpl" as doctpl
import "http://srg.aut.uah.es/micobs/svm/testsetup" as testsetup
import "http://srg.aut.uah.es/micobs/svm/tctemplate" as tctemplate
import "http://srg.aut.uah.es/micobs/svm/tmtemplate" as tmtemplate
import "http://srg.aut.uah.es/tmtcif/tcheader" as tcheader
import "http://srg.aut.uah.es/tmtcif/tmheader" as tmheader
import "http://srg.aut.uah.es/tmtcif/tc" as tc
import "http://srg.aut.uah.es/tmtcif/tm" as tm
import "http://srg.aut.uah.es/tmtcif/fieldvalue" as fieldvalue
import "http://srg.aut.uah.es/tmtcif/enum" as enum_
import "http://srg.aut.uah.es/tmtcif/scenario" as scenario

VSVSDocument returns VSVSDocument:
	'<SVS'
		'name=' name=STRING
		'id=' id=STRING
		'issue=' issue=UINT_STRING
		'revision=' revision=UINT_STRING
		'date=' date=STRING
		'>'
		('<parent' 'name=' parents+=[tdm::VTraceableDocument|STRING] '/>')*
		(tbcsTbdsSection=VSVSTBCsTBDs)?
		introductionSection=VSVSIntroduction
		applicableDocumentsSection=VSVSApplicableDocuments
		referenceDocumentsSection=VSVSReferenceDocuments
		termsDefinitionsAbbreviationsSection=VSVSTermsDefinitionsAbbreviations
		softwareOverviewSection=VSVSSoftwareOverview
		taskIdentificationSection=VSVSTaskIdentification
		testingSpecificationDesignSection=VSVSTestingSpecificationDesign
		testCasesSection=VSVSTestCases
		testProceduresSection=VSVSTestProcedures
		analysisInspectionReviewSection=VSVSAnalysisInspectionReview
		testPlatformRequirementsSection=VSVSTestPlatformRequirements
		additionalInformationSection=VSVSAdditionalInformation
	'</SVS>';

VSVSTBCsTBDs returns VSVSTBCsTBDs:
	{VSVSTBCsTBDs}
	'<TBCsTBDs>'
		(tbcs+=DTBC)*
		(tbds+=DTBD)*
	'</TBCsTBDs>';

DTBC returns doctpl::DTBC:
	'<TBC'
		'name=' name=STRING
		('description=' description=STRING |
		'parentTBC=' parentTBC=[doctpl::DTBC|STRING])
	'/>';

DTBD returns doctpl::DTBD:
	'<TBD'
		'name=' name=STRING
		('description=' description=STRING |
		'parentTBD=' parentTBD=[doctpl::DTBD|STRING])
	'/>';

DBody returns doctpl::DBody:
	'<body>'
		(bodyContent+=DBodyContent)+
	'</body>';

DBodyContent returns doctpl::DBodyContent:
	DParagraph | DItemize | DEnumerate | DFigureFromFile | DTableFromFile | DBasicTable;

enum DAlignment returns doctpl::DAlignment:
	left = '"left"' | center = '"center"' | right = '"right"' | justified = '"justified"';

DParagraph returns doctpl::DParagraph:
	'<paragraph'
		('name=' name=STRING)?
		('alignment=' alignment=DAlignment)?
		('style=' style=STRING)?
		('indent=' indent=REAL_STRING)?
		'>'
		(paragraphContent+=DParagraphContent)+ 
	'</paragraph>';

DListItem returns doctpl::DListItem:
{doctpl::DListItem}
	'<listItem>'
		(paragraph=DParagraph)?
		('<sublist>' sublist=DListContent '</sublist>')?
	'</listItem>';

DListContent returns doctpl::DListContent:
	DItemize | DEnumerate;

DItemize returns doctpl::DItemize:
	'<itemize'
		('name=' name=STRING)?
		('alignment=' alignment=DAlignment)?
		('style=' style=STRING)?
		('indent=' indent=REAL_STRING)?
		'>'
		(items+=DListItem)+ 
	'</itemize>';

DEnumerate returns doctpl::DEnumerate:
	'<enumerate'
		('name=' name=STRING)?
		('alignment=' alignment=DAlignment)?
		('style=' style=STRING)?
		('indent=' indent=REAL_STRING)?
		'>'
		(items+=DListItem)+ 
	'</enumerate>';

DParagraphContent returns doctpl::DParagraphContent:
	DRun | DHyperlink;

enum DRunAttributes returns doctpl::DRunAttributes:
	TRUE = '"true"' | FALSE = '"false"';

DRun returns doctpl::DRun:
	'<run'
		('bold=' bold=DRunAttributes)?
		('italics=' italics=DRunAttributes)?
		('underline=' underline=DRunAttributes)?
		('color=' color=STRING)?
	'>'
		(tab=DTab)?
		text=DText
	'</run>';

DHyperlink returns doctpl::DHyperlink:
	'<hyperlink'
		'reference=' reference=[doctpl::DReferenceableObject|STRING]
	(('>' (run=DRun) '</hyperlink>') | ('/>'));

DTab returns doctpl::DTab:
{doctpl::DTab}
    '<tab/>';
		
DText returns doctpl::DText:
	content=RUNTEXT;

terminal RUNTEXT returns ecore::EString:
    '<text>' -> '</text>';

DFigureFromFile returns doctpl::DFigureFromFile:
	'<figureFromFile'
		'name=' name=STRING
		'referenceFile=' referenceFile=STRING
		'width=' width=UINT_STRING
		'height=' height=UINT_STRING
		('alignment=' alignment=DAlignment)?
		('style=' style=STRING)?
		('indent=' indent=REAL_STRING)?
		('caption=' caption=STRING)?
	'/>';

DTableFromFile returns doctpl::DTableFromFile:
	'<tableFromFile'
		'name=' name=STRING
		'referenceFile=' referenceFile=STRING
		'width=' width=UINT_STRING
		'height=' height=UINT_STRING
		('alignment=' alignment=DAlignment)?
		('style=' style=STRING)?
		('indent=' indent=REAL_STRING)?
		('caption=' caption=STRING)?
	'/>';

DBasicTable returns doctpl::DBasicTable: 
	'<basicTable'
		'name=' name=STRING
		('width=' width=UINT_STRING)?
		('alignment=' alignment=DAlignment)?
		('style=' style=STRING)?
		('indent=' indent=REAL_STRING)?
		('caption=' caption=STRING)?
	'>'
		(rows+=DRow)+
	'</basicTable>';

DRow returns doctpl::DRow:
	'<row>'
		(cells+=DCell)+
	'</row>';

DCell returns doctpl::DCell:
	'<cell'
		('colSpan=' colSpan=UINT_STRING)?
		('rowSpan=' rowSpan=UINT_STRING)?
		('width=' width=UINT_STRING)?
		('shadow=' shadow=STRING)?
	'>'
		(bodyContent+=DBodyContent)+
	'</cell>';

DApplicableDocument returns doctpl::DApplicableDocument:
	'<ApplicableDocument'
		'name=' name=STRING
		'title=' title=STRING
		'id=' id=STRING
		('issue=' issue=UINT_STRING
		('revision=' revision=UINT_STRING)?)?
		('date=' date=STRING)?
		('url=' url=STRING)?
	'/>';

DReferenceDocument returns doctpl::DReferenceDocument:
	'<ReferenceDocument'
		'name=' name=STRING
		'title=' title=STRING
		'id=' id=STRING
		('issue=' issue=UINT_STRING
		('revision=' revision=UINT_STRING)?)?
		('date=' date=STRING)?
		('url=' url=STRING)?
	'/>';

VSVSTestInfo returns VSVSTestInfo:
{VSVSTestInfo}
	(body=DBody)?;

VSVSFixedSection returns VSVSFixedSection:
{VSVSFixedSection}
	(body=DBody)?
	(svsInstatiableSubsections+=VSVSInstantiableSection)*;
	
VSVSInstantiableSection returns VSVSInstantiableSection:
	'<subsection'
		'name=' name=STRING
		'>'
		(body=DBody)?
		(svsInstatiableSubsections+=VSVSInstantiableSection)*
	'</subsection>';

VSVSIntroduction returns VSVSIntroduction:
	'<Introduction>'
		(svsInstatiableSubsections+=VSVSInstantiableSection)+
	'</Introduction>';

VSVSApplicableDocuments returns VSVSApplicableDocuments:
	{VSVSApplicableDocuments}
	'<ApplicableDocuments>'
		(applicableDocuments+=DApplicableDocument)*
	'</ApplicableDocuments>';

VSVSReferenceDocuments returns VSVSReferenceDocuments:
	{VSVSReferenceDocuments}
	'<ReferenceDocuments>'
		(referenceDocuments+=DReferenceDocument)*
	'</ReferenceDocuments>';

VSVSTermsDefinitionsAbbreviations returns VSVSTermsDefinitionsAbbreviations:
	{VSVSTermsDefinitionsAbbreviations}
	'<TermsDefinitionsAbbreviations>'
		(terms+=VSVSTerm)*
		(definitions+=VSVSDefinition)*
		(abbreviations+=VSVSAbbreviation)*
	'</TermsDefinitionsAbbreviations>';

VSVSSoftwareOverview returns VSVSSoftwareOverview:
	{VSVSSoftwareOverview}
	'<SoftwareOverview>'
		(body=DBody)?
		(svsInstatiableSubsections+=VSVSInstantiableSection)*
	'</SoftwareOverview>';

VSVSTaskIdentification returns VSVSTaskIdentification:
	'<TaskIdentification>'
		'<TaskCriteria>' taskCriteria=VSVSFixedSection '</TaskCriteria>'
		'<FeaturesToBeTested>' featuresToBeTested=VSVSFixedSection '</FeaturesToBeTested>'
		'<FeaturesNotToBeTested>' featuresNotToBeTested=VSVSFixedSection '</FeaturesNotToBeTested>'
		'<TestPassFailCriteria>' testPassFailCriteria=VSVSFixedSection '</TestPassFailCriteria>'
		'<ItemsCanNotBeValidated>' itemsCanNotBeValidated=VSVSFixedSection '</ItemsCanNotBeValidated>'
		'<ManuallyAutoGeneratedCode>' manuallyAutoGeneratedCode=VSVSFixedSection '</ManuallyAutoGeneratedCode>'
	'</TaskIdentification>';

VSVSTestingSpecificationDesign returns VSVSTestingSpecificationDesign:
	'<TestingSpecificationDesign'
		'testSetup=' testSetup=[testsetup::VTestSetupDocument|STRING]
		'>'
		'<General>' general=VSVSFixedSection '</General>'
		(testDesigns+=VSVSTestDesign)+
	'</TestingSpecificationDesign>';

VSVSTestCases returns VSVSTestCases:
	'<TestCases>'
		'<General>' general=VSVSFixedSection '</General>'
		(testCases+=VSVSTestCase)+
	'</TestCases>';

VSVSTestProcedures returns VSVSTestProcedures:
	'<TestProcedures>'
		'<General>' general=VSVSFixedSection '</General>'
		(testProcedures+=VSVSTestProcedure)+
	'</TestProcedures>';

VSVSAnalysisInspectionReview returns VSVSAnalysisInspectionReview:
	{VSVSAnalysisInspectionReview}
	'<AnalysisInspectionReview>'
		(body=DBody)?
		(svsInstatiableSubsections+=VSVSInstantiableSection)*
	'</AnalysisInspectionReview>';

VSVSTestPlatformRequirements returns VSVSTestPlatformRequirements:
	{VSVSTestPlatformRequirements}
	'<TestPlatformRequirements>'
		(body=DBody)?
		(svsInstatiableSubsections+=VSVSInstantiableSection)*
	'</TestPlatformRequirements>';

VSVSAdditionalInformation returns VSVSAdditionalInformation:
	{VSVSAdditionalInformation}
	'<AdditionalInformation>'
		(body=DBody)?
		(svsInstatiableSubsections+=VSVSInstantiableSection)*
	'</AdditionalInformation>';

VSVSTerm returns VSVSTerm:
	'<Term'
		'name=' name=STRING '>'
		description=DRun
	'</Term>';

VSVSDefinition returns VSVSDefinition:
	'<Definition'
		'name=' name=STRING '>'
		description=DRun
	'</Definition>';

VSVSAbbreviation returns VSVSAbbreviation:
	'<Abbreviation'
		'name=' name=STRING '>'
		description=DRun
	'</Abbreviation>';

VSVSTestDesign returns VSVSTestDesign:
	'<TestDesign'
		'name=' name=STRING
		'>'
		'<General>' general=VSVSFixedSection '</General>'
		'<FeaturesToBeTested>' featuresToBeTested=VSVSFixedSection '</FeaturesToBeTested>'
		'<ApproachRefinements>' approachRefinements=VSVSFixedSection '</ApproachRefinements>'
	'</TestDesign>';

VSVSTestCase returns VSVSTestCase:
	'<TestCase'
		'name=' name=STRING
		'>'
		'<Identifier>' identifier=VSVSTestInfo '</Identifier>'
		'<Inputs>' inputs=VSVSTestInfo '</Inputs>'
		'<Outputs>' outputs=VSVSTestInfo '</Outputs>'
		'<PassFailCriteria>' passFailCriteria=VSVSTestInfo '</PassFailCriteria>'
		'<EnvironmentalNeeds>' environmentalNeeds=VSVSTestInfo '</EnvironmentalNeeds>'
		'<SpecialConstraints>' specialConstraints=VSVSTestInfo '</SpecialConstraints>'
		'<InterfaceDependencies>' interfaceDependencies=VSVSTestInfo '</InterfaceDependencies>'
		('<ValidatingItem' 'name=' validatingItem+=[tdm::VTraceableDocumentAbstractItem|STRING] '/>')+
	'</TestCase>';

VSVSTestProcedure returns VSVSTestProcedure:
	'<TestProcedure'
		'name=' name=STRING
		'>'
		'<Identifier>' identifier=VSVSTestInfo '</Identifier>'
		'<Purpose>' purpose=VSVSTestInfo '</Purpose>'
		'<Scenario' 'ref='scenario=[testsetup::VTestSetupScenarioSection|STRING] '/>'
		('<TestCase' 'ref=' testCase+=[VSVSTestCase|STRING] '/>')+
		procedureSteps=VSVSProcedureSteps
		'<TestScript>' testScript=VSVSTestInfo '</TestScript>'
	'</TestProcedure>';

VSVSProcedureSteps returns VSVSProcedureSteps:
		'<ProcedureSteps'
		'>'
		(step+=VSVSProcedureStep)+
		'</ProcedureSteps>';

enum VSVSTimeUnit returns VSVSTimeUnit:
	miliseconds = '"miliseconds"' | seconds = '"seconds"';

VSVSProcedureStep returns VSVSProcedureStep:
	'<Step'
		'name=' name=STRING
		('prev_step=' prev_step=[VSVSProcedureStep|STRING]
		'prev_tm_from_prev_step=' prev_tm_from_prev_step=[VSVSStepTelemetry|STRING])?
		('replays=' replays=UINT_STRING)?
		'>'
		(configurations=VSVSStepConfigurations)?
		inputs=VSVSStepInputs
		(outputs=VSVSStepOutputs)?
	'</Step>'
;

VSVSStepConfigurations returns VSVSStepConfigurations:
	{VSVSStepConfigurations}
	'<Configurations>'
		(configuration+=VSVSStepConfiguration)+
	'</Configurations>'
;

VSVSStepConfiguration returns VSVSStepConfiguration:
	'<Configuration'
		'ref=' configuration=[testsetup::VTestSetupPacketConfiguration|STRING]
		('filterStatus=' filterStatus=VTestSetupConfigurationStatus)?
		('printStatus=' printStatus=VTestSetupConfigurationStatus)?
		'/>'
;

enum VTestSetupConfigurationStatus returns testsetup::VTestSetupConfigurationStatus:
	off = '"off"' | on = '"on"';

VSVSStepInputs returns VSVSStepInputs:
VSVSStepAction | VSVSStepTelecommandSequence;

VSVSStepAction returns VSVSStepAction:
	'<Action'
		'selectedAction=' selectedAction=[testsetup::VTestSetupAction|STRING]
		('delay_value=' delay_value=UINT_STRING
		'delay_unit=' delay_unit=VSVSTimeUnit)?
		('span_value=' span_value=UINT_STRING
		'span_unit=' span_unit=VSVSTimeUnit)?
	'/>'
;

VSVSStepTelecommandSequence returns VSVSStepTelecommandSequence:
	{VSVSStepTelecommandSequence}
	'<TelecommandSequence>'
		(telecommand+=VSVSStepTelecommand)+
	'</TelecommandSequence>'
;

VSVSStepTelecommand returns VSVSStepTelecommand:
	'<Telecommand'
		'name=' name=STRING
		'interface=' interface=[testsetup::VTestSetupSupportedInterface|STRING]
		('delay_value=' delay_value=UINT_STRING
		'delay_unit=' delay_unit=VSVSTimeUnit)?
		'>'
		tcData=VSVSStepTelecommandData
		(tcHeader=VSVSStepTelecommandHeader)?
	'</Telecommand>'
;

VSVSStepTelecommandData returns VSVSStepTelecommandData:
	'<TelecommandData'
		'template=' tcTemplate=[tctemplate::VTCTemplate|STRING]
		(('>' (fields+=VSVSStepTelecommandDataField)+ '</TelecommandData>') | ('/>'))
;

VSVSStepTelecommandDataField returns VSVSStepTelecommandDataField:
	'<Field'
		'fieldRef=' fieldRef=[tc::TMTCIFTCField|STRING]
		'>'
		value=TMTCIFFieldValueTC
	'</Field>'
;

TMTCIFFieldValueTC returns fieldvalue::TMTCIFFieldValue:
	TMTCIFFieldValueRaw | TMTCIFFieldValueFile | TMTCIFFieldValueEnum;

VSVSStepTelecommandHeader returns VSVSStepTelecommandHeader:
	'<TelecommandHeader>'
		(fields+=VSVSStepTelecommandHeaderField)+
	'</TelecommandHeader>'
;

VSVSStepTelecommandHeaderField returns VSVSStepTelecommandHeaderField:
	'<HeaderField'
		'fieldRef=' fieldRef=[tcheader::TMTCIFTCHeaderField|STRING]
		'>'
		value=TMTCIFFieldValueHeader
	'</HeaderField>'
;

TMTCIFFieldValueHeader returns fieldvalue::TMTCIFFieldValue:
	TMTCIFFieldValueRaw | TMTCIFFieldValueFile;

TMTCIFFieldValueRaw returns fieldvalue::TMTCIFFieldValueRaw:
	'<FieldValueRaw' 'value=' value=(UINT_STRING | HEX_STRING) '/>';

TMTCIFFieldValueFile returns fieldvalue::TMTCIFFieldValueFile:
	'<FieldValueFile' 'filename=' filename=STRING '/>';

TMTCIFFieldValueEnum returns fieldvalue::TMTCIFFieldValueEnum:
	'<FieldValueEnum' 'enumRef=' enumRef=[enum_::TMTCIFEnum|STRING] 'valueRef=' valueRef=[enum_::TMTCIFEnumValue|STRING] '/>';

VSVSStepOutputs returns VSVSStepOutputs:
VSVSStepTelemetrySet;

VSVSStepTelemetrySet returns VSVSStepTelemetrySet:
	'<TelemetrySet'
		'checkmode=' checkmode=VSVSStepTelemetrySetCheckmode
		'valid_time_interval_value=' valid_time_interval_value=UINT_STRING
		'valid_time_interval_unit=' valid_time_interval_unit=VSVSTimeUnit
		'>'
		(telemetry+=VSVSStepTelemetry)+
	'</TelemetrySet>'
;

enum VSVSStepTelemetrySetCheckmode returns VSVSStepTelemetrySetCheckmode:
	all = '"all"' | allunsorted = '"allunsorted"' | any = '"any"'
;

VSVSStepTelemetry returns VSVSStepTelemetry:
	'<Telemetry'
		'name=' name=STRING
		'interface=' interface=[testsetup::VTestSetupSupportedInterface|STRING]
	'>'
		tmData=VSVSStepTelemetryData
		(tmHeader=VSVSStepTelemetryHeader)?
	'</Telemetry>'
;

VSVSStepTelemetryData returns VSVSStepTelemetryData:
	'<TelemetryData'
		'template=' tmTemplate=[tmtemplate::VTMTemplate|STRING]
		(('>' (fields+=VSVSStepTelemetryDataField)+ '</TelemetryData>') | ('/>'))
;

VSVSStepTelemetryDataField returns VSVSStepTelemetryDataField:
	'<Field'
		'fieldRef=' fieldRef=[tm::TMTCIFTMField|STRING]
		'>'
		value=TMTCIFFieldValueTM
	'</Field>'
;

VSVSStepTelemetryHeader returns VSVSStepTelemetryHeader:
	'<TelemetryHeader>'
		(fields+=VSVSStepTelemetryHeaderField)+
	'</TelemetryHeader>'
;

VSVSStepTelemetryHeaderField returns VSVSStepTelemetryHeaderField:
	'<HeaderField'
		'fieldRef=' fieldRef=[tmheader::TMTCIFTMHeaderField|STRING]
		'>'
		value=TMTCIFFieldValueRaw
	'</HeaderField>'
;

TMTCIFFieldValueTM returns fieldvalue::TMTCIFFieldValue:
	TMTCIFFieldValueRaw | TMTCIFFieldValueFile | TMTCIFFieldValueEnum;

QualifiedName returns ecore::EString:
	ID ('.' ID)*;

Version returns ecore::EString:
	(INT | ((INT)? ID)) ('.' (INT | ((INT)? ID)))*
	;

VersionedQualifiedName returns ecore::EString:
	QualifiedName '(' Version ')'
	;

VersionedQualifiedReferenceName returns ecore::EString:
	(VersionedQualifiedName '::')? ID ('::' ID)*;

terminal HEXADECIMAL returns ecore::EString:
	('0x' (('0'..'9') | ('a'..'f') | ('A'..'F'))+);

INTEGER returns ecore::EString:
	('-'? INT | HEXADECIMAL);
	
terminal UINT_STRING returns ecore::EString:
	('"' ('0'..'9')+ '"');
	
terminal REAL_STRING returns ecore::EString:
	('"' ('0'..'9')+ ('.' ('0'..'9')+)? '"');

terminal HEX_STRING returns ecore::EString:
	('"0x' (('0'..'9') | ('a'..'f') | ('A'..'F'))+ '"');