// automatically generated by Xtext
grammar es.uah.aut.srg.micobs.svm.lang.svs.SVS with org.eclipse.xtext.common.Terminals

import "http://srg.aut.uah.es/micobs/svm/svs" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://srg.aut.uah.es/micobs/svm/vdm" as vdm
import "http://srg.aut.uah.es/micobs/svm/tdm" as tdm
import "http://srg.aut.uah.es/micobs/doctpl/doc" as doc

VSVSDocument returns VSVSDocument:
	'<SVS'
		'name=' name=STRING
		'id=' id=STRING
		'issue=' issue=STRING
		'revision=' revision=STRING
		'date=' date=STRING
		'>'
		('<parent' 'name=' parents+=[tdm::VTraceableDocument|STRING] '/>')*
		introductionSection=VSVSIntroduction
		applicableDocumentsSection=VSVSApplicableDocuments
		referenceDocumentsSection=VSVSReferenceDocuments
		termsDefinitionsAbbreviationsSection=VSVSTermsDefinitionsAbbreviations
		softwareOverviewSection=VSVSSoftwareOverview
		taskIdentificationSection=VSVSTaskIdentification
		testingSpecificationDesignSection=VSVSTestingSpecificationDesign
		testCasesSection=VSVSTestCases
		testProceduresSection=VSVSTestProcedures
		analysisInspectionReviewSection=VSVSAnalysisInspectionReview
		testPlatformRequirementsSection=VSVSTestPlatformRequirements
		additionalInformationSection=VSVSAdditionalInformation
	'</SVS>';

DBody returns doc::DBody:
	'<body>'
		(bodyContent+=DBodyContent)+
	'</body>';

DBodyContent returns doc::DBodyContent:
	DParagraph | DItemize | DEnumerate | DFigureFromFile | DTableFromFile | DBasicTable;

DParagraph returns doc::DParagraph:
	'<paragraph>'
		(paragraphContent+=DParagraphContent)+ 
	'</paragraph>';

DListItem returns doc::DListItem:
	'<listItem>'
		(paragraph+=DParagraph)+ 
		('<sublist>' sublist=DListContent '</sublist>')?
	'</listItem>';

DListContent returns doc::DListContent:
	DItemize | DEnumerate;

DItemize returns doc::DItemize:
	'<itemize>'
		(items+=DListItem)+ 
	'</itemize>';

DEnumerate returns doc::DEnumerate:
	'<enumerate>'
		(items+=DListItem)+ 
	'</enumerate>';

DParagraphContent returns doc::DParagraphContent:
	DRun | DHyperlink;

DRun returns doc::DRun:
	'<run'
		('bold="true"')?
		('italics="true"')?
		('underline="true"')?
	'>'
		text=DText
	'</run>';

DHyperlink returns doc::DHyperlink:
	'<hyperlink'
		'reference=' reference=[doc::DReferenceableObject|STRING]
	'>'
		(run=DRun)?
	'</hyperlink>';
	
DText returns doc::DText:
	content=RUNTEXT;

terminal RUNTEXT returns ecore::EString:
    '<text>' -> '</text>';

DFigureFromFile returns doc::DFigureFromFile:
	'<figureFromFile'
		'name=' name=STRING
		'referenceFile=' referenceFile=STRING
		('caption=' caption=STRING)?
	'/>';

DTableFromFile returns doc::DTableFromFile:
	'<tableFromFile'
		'name=' name=STRING
		'referenceFile=' referenceFile=STRING
		('caption=' caption=STRING)?
	'/>';

DBasicTable returns doc::DBasicTable: 
	'<basicTable'
		'name=' name=STRING
		('caption=' caption=STRING)?
	'>'
		(rows+=DRow)+
	'</basicTable>';

DRow returns doc::DRow:
	'<row'
		'span=' span=STRING
	'>'
		(columns+=DColumn)+ 
	'</row>';

DColumn returns doc::DColumn:
	'<column'
		'span=' span=STRING
	'>'
		(cells+=DCell)+
	'</column>';

DCell returns doc::DCell:
	'<cell>'
		(bodyContent+=DBodyContent)+
	'</cell>';

DApplicableDocument returns doc::DApplicableDocument:
	'<ApplicableDocument'
		'name=' name=STRING
		'title=' title=STRING
		'id=' id=STRING
		('issue=' issue=STRING
		'revision=' revision=STRING)?
		('date=' date=STRING)?
	'/>';

DReferenceDocument returns doc::DReferenceDocument:
	'<ReferenceDocument'
		'name=' name=STRING
		'title=' title=STRING
		'id=' id=STRING
		('issue=' issue=STRING
		'revision=' revision=STRING)?
		('date=' date=STRING)?
	'/>';

VSVSFixedSection returns VSVSFixedSection:
{VSVSFixedSection}
	(body=DBody)?
	(svsInstatiableSubsections+=VSVSInstantiableSection)*;

VSVSInstantiableSection returns VSVSInstantiableSection:
	'<subsection'
		'name=' name=STRING
		'>'
		(body=DBody)?
		(svsInstatiableSubsections+=VSVSInstantiableSection)*
	'</subsection>';

VSVSIntroduction returns VSVSIntroduction:
	'<Introduction>'
		(svsInstatiableSubsections+=VSVSInstantiableSection)+
	'</Introduction>';

VSVSApplicableDocuments returns VSVSApplicableDocuments:
	{VSVSApplicableDocuments}
	'<ApplicableDocuments>'
		(applicableDocuments+=DApplicableDocument)*
	'</ApplicableDocuments>';

VSVSReferenceDocuments returns VSVSReferenceDocuments:
	{VSVSReferenceDocuments}
	'<ReferenceDocuments>'
		(referenceDocuments+=DReferenceDocument)*
	'</ReferenceDocuments>';

VSVSTermsDefinitionsAbbreviations returns VSVSTermsDefinitionsAbbreviations:
	{VSVSTermsDefinitionsAbbreviations}
	'<TermsDefinitionsAbbreviations>'
		(terms+=VSVSTerm)*
		(definitions+=VSVSDefinition)*
		(abbreviations+=VSVSAbbreviation)*
	'</TermsDefinitionsAbbreviations>';

VSVSSoftwareOverview returns VSVSSoftwareOverview:
	{VSVSSoftwareOverview}
	'<SoftwareOverview>'
		(body=DBody)?
		(svsInstatiableSubsections+=VSVSInstantiableSection)*
	'</SoftwareOverview>';

VSVSTaskIdentification returns VSVSTaskIdentification:
	'<TaskIdentification>'
		'<TaskCriteria>' taskCriteria=VSVSFixedSection '</TaskCriteria>'
		'<FeaturesToBeTested>' featuresToBeTested=VSVSFixedSection '</FeaturesToBeTested>'
		'<FeaturesNotToBeTested>' featuresNotToBeTested=VSVSFixedSection '</FeaturesNotToBeTested>'
		'<TestPassFailCriteria>' testPassFailCriteria=VSVSFixedSection '</TestPassFailCriteria>'
		'<ItemsCanNotBeValidated>' itemsCanNotBeValidated=VSVSFixedSection '</ItemsCanNotBeValidated>'
		'<ManuallyAutoGeneratedCode>' manuallyAutoGeneratedCode=VSVSFixedSection '</ManuallyAutoGeneratedCode>'
	'</TaskIdentification>';

VSVSTestingSpecificationDesign returns VSVSTestingSpecificationDesign:
	'<TestingSpecificationDesign>'
		'<General>' general=VSVSFixedSection '</General>'
		(testDesigns+=VSVSTestDesign)+
	'</TestingSpecificationDesign>';

VSVSTestCases returns VSVSTestCases:
	'<TestCases>'
		'<General>' general=VSVSFixedSection '</General>'
		(testCases+=VSVSTestCase)+
	'</TestCases>';

VSVSTestProcedures returns VSVSTestProcedures:
	'<TestProcedures>'
		'<General>' general=VSVSFixedSection '</General>'
		(testProcedures+=VSVSTestProcedure)+
	'</TestProcedures>';

VSVSAnalysisInspectionReview returns VSVSAnalysisInspectionReview:
	{VSVSAnalysisInspectionReview}
	'<AnalysisInspectionReview>'
		(body=DBody)?
		(svsInstatiableSubsections+=VSVSInstantiableSection)*
	'</AnalysisInspectionReview>';

VSVSTestPlatformRequirements returns VSVSTestPlatformRequirements:
	{VSVSTestPlatformRequirements}
	'<TestPlatformRequirements>'
		(body=DBody)?
		(svsInstatiableSubsections+=VSVSInstantiableSection)*
	'</TestPlatformRequirements>';

VSVSAdditionalInformation returns VSVSAdditionalInformation:
	{VSVSAdditionalInformation}
	'<AdditionalInformation>'
		(body=DBody)?
		(svsInstatiableSubsections+=VSVSInstantiableSection)*
	'</AdditionalInformation>';

VSVSTerm returns VSVSTerm:
	'<Term'
		'name=' name=STRING '>'
		description=DRun
	'</Term>';

VSVSDefinition returns VSVSDefinition:
	'<Definition'
		'name=' name=STRING '>'
		description=DRun
	'</Definition>';

VSVSAbbreviation returns VSVSAbbreviation:
	'<Abbreviation'
		'name=' name=STRING '>'
		description=DRun
	'</Abbreviation>';

VSVSTestDesign returns VSVSTestDesign:
	'<TestDesign'
		'name=' name=STRING
		'>'
		'<General>' general=VSVSFixedSection '</General>'
		'<FeaturesToBeTested>' featuresToBeTested=VSVSFixedSection '</FeaturesToBeTested>'
		'<ApproachRefinements>' approachRefinements=VSVSFixedSection '</ApproachRefinements>'
	'</TestDesign>';

VSVSTestCase returns VSVSTestCase:
	'<TestCase'
		'name=' name=STRING
		'>'
		'<Identifier>' identifier=VSVSFixedSection '</Identifier>'
		'<Inputs>' inputs=VSVSFixedSection '</Inputs>'
		'<Outputs>' outputs=VSVSFixedSection '</Outputs>'
		'<PassFailCriteria>' passFailCriteria=VSVSFixedSection '</PassFailCriteria>'
		'<EnvironmentalNeeds>' environmentalNeeds=VSVSFixedSection '</EnvironmentalNeeds>'
		'<SpecialConstraints>' specialConstraints=VSVSFixedSection '</SpecialConstraints>'
		'<InterfaceDependencies>' interfaceDependencies=VSVSFixedSection '</InterfaceDependencies>'
		('<ValidatingItems' 'name=' validatingItems+=[tdm::VTraceableDocumentAbstractItem|STRING] '/>')+
	'</TestCase>';

VSVSTestProcedure returns VSVSTestProcedure:
	'<TestProcedure'
		'name=' name=STRING
		'>'
		'<Identifier>' identifier=VSVSFixedSection '</Identifier>'
		'<Purpose>' purpose=VSVSFixedSection '</Purpose>'
		('<TestCase' 'name=' testCase+=[VSVSTestCase|STRING] '/>')*
		'<Steps>' (steps+=VSVSProcedureStep) '</Steps>'
		'<TestScript>' testScript=VSVSFixedSection '</TestScript>'
	'</TestProcedure>';

VSVSProcedureStep returns VSVSProcedureStep:
	{VSVSProcedureStep}
	'<ProcedureStep' '/>'
	;
