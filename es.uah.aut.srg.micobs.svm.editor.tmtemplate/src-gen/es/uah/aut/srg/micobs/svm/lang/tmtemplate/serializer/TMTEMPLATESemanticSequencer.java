/*
 * generated by Xtext 2.10.0
 */
package es.uah.aut.srg.micobs.svm.lang.tmtemplate.serializer;

import com.google.inject.Inject;
import es.uah.aut.srg.micobs.svm.lang.tmtemplate.services.TMTEMPLATEGrammarAccess;
import es.uah.aut.srg.micobs.svm.tmtemplate.VTMTemplate;
import es.uah.aut.srg.micobs.svm.tmtemplate.VTMTemplateField;
import es.uah.aut.srg.micobs.svm.tmtemplate.tmtemplatePackage;
import es.uah.aut.srg.tmtcif.fieldvalue.TMTCIFFieldValueFile;
import es.uah.aut.srg.tmtcif.fieldvalue.TMTCIFFieldValueRaw;
import es.uah.aut.srg.tmtcif.fieldvalue.fieldvaluePackage;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class TMTEMPLATESemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private TMTEMPLATEGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == fieldvaluePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case fieldvaluePackage.TMTCIF_FIELD_VALUE_FILE:
				sequence_TMTCIFFieldValueFile(context, (TMTCIFFieldValueFile) semanticObject); 
				return; 
			case fieldvaluePackage.TMTCIF_FIELD_VALUE_RAW:
				sequence_TMTCIFFieldValueRaw(context, (TMTCIFFieldValueRaw) semanticObject); 
				return; 
			}
		else if (epackage == tmtemplatePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case tmtemplatePackage.VTM_TEMPLATE:
				sequence_VTMTemplate(context, (VTMTemplate) semanticObject); 
				return; 
			case tmtemplatePackage.VTM_TEMPLATE_FIELD:
				sequence_VTMTemplateField(context, (VTMTemplateField) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     TMTCIFFieldValue returns TMTCIFFieldValueFile
	 *     TMTCIFFieldValueFile returns TMTCIFFieldValueFile
	 *
	 * Constraint:
	 *     filename=STRING
	 */
	protected void sequence_TMTCIFFieldValueFile(ISerializationContext context, TMTCIFFieldValueFile semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, fieldvaluePackage.Literals.TMTCIF_FIELD_VALUE_FILE__FILENAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, fieldvaluePackage.Literals.TMTCIF_FIELD_VALUE_FILE__FILENAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTMTCIFFieldValueFileAccess().getFilenameSTRINGTerminalRuleCall_2_0(), semanticObject.getFilename());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TMTCIFFieldValue returns TMTCIFFieldValueRaw
	 *     TMTCIFFieldValueRaw returns TMTCIFFieldValueRaw
	 *
	 * Constraint:
	 *     (value=UINT_STRING | value=HEX_STRING)
	 */
	protected void sequence_TMTCIFFieldValueRaw(ISerializationContext context, TMTCIFFieldValueRaw semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VTMTemplateField returns VTMTemplateField
	 *
	 * Constraint:
	 *     (fieldRef=[TMTCIFTMField|STRING] value=TMTCIFFieldValue)
	 */
	protected void sequence_VTMTemplateField(ISerializationContext context, VTMTemplateField semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, tmtemplatePackage.Literals.VTM_TEMPLATE_FIELD__FIELD_REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, tmtemplatePackage.Literals.VTM_TEMPLATE_FIELD__FIELD_REF));
			if (transientValues.isValueTransient(semanticObject, tmtemplatePackage.Literals.VTM_TEMPLATE_FIELD__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, tmtemplatePackage.Literals.VTM_TEMPLATE_FIELD__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVTMTemplateFieldAccess().getFieldRefTMTCIFTMFieldSTRINGTerminalRuleCall_3_0_1(), semanticObject.getFieldRef());
		feeder.accept(grammarAccess.getVTMTemplateFieldAccess().getValueTMTCIFFieldValueParserRuleCall_5_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     VTMTemplate returns VTMTemplate
	 *
	 * Constraint:
	 *     (name=STRING tmOutput=[TMTCIFTM|STRING] fields+=VTMTemplateField*)
	 */
	protected void sequence_VTMTemplate(ISerializationContext context, VTMTemplate semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
