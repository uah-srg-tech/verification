/*
 * generated by Xtext 2.10.0
 */
grammar InternalTMTEMPLATE;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
}

@lexer::header {
package es.uah.aut.srg.micobs.svm.lang.tmtemplate.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package es.uah.aut.srg.micobs.svm.lang.tmtemplate.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import es.uah.aut.srg.micobs.svm.lang.tmtemplate.services.TMTEMPLATEGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/

 	private TMTEMPLATEGrammarAccess grammarAccess;

    public InternalTMTEMPLATEParser(TokenStream input, TMTEMPLATEGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "VTMTemplate";
   	}

   	@Override
   	protected TMTEMPLATEGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleVTMTemplate
entryRuleVTMTemplate returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVTMTemplateRule()); }
	iv_ruleVTMTemplate=ruleVTMTemplate
	{ $current=$iv_ruleVTMTemplate.current; }
	EOF;

// Rule VTMTemplate
ruleVTMTemplate returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='<TMTemplate'
		{
			newLeafNode(otherlv_0, grammarAccess.getVTMTemplateAccess().getTMTemplateKeyword_0());
		}
		otherlv_1='name='
		{
			newLeafNode(otherlv_1, grammarAccess.getVTMTemplateAccess().getNameKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_STRING
				{
					newLeafNode(lv_name_2_0, grammarAccess.getVTMTemplateAccess().getNameSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVTMTemplateRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_3='tmOutput='
		{
			newLeafNode(otherlv_3, grammarAccess.getVTMTemplateAccess().getTmOutputKeyword_3());
		}
		(
			(
				{
					/* */
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVTMTemplateRule());
					}
				}
				otherlv_4=RULE_STRING
				{
					newLeafNode(otherlv_4, grammarAccess.getVTMTemplateAccess().getTmOutputTMTCIFTMCrossReference_4_0());
				}
			)
		)
		(
			(
				otherlv_5='>'
				{
					newLeafNode(otherlv_5, grammarAccess.getVTMTemplateAccess().getGreaterThanSignKeyword_5_0_0());
				}
				(
					otherlv_6='<Fields>'
					{
						newLeafNode(otherlv_6, grammarAccess.getVTMTemplateAccess().getFieldsKeyword_5_0_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getVTMTemplateAccess().getFieldsVTMTemplateFieldParserRuleCall_5_0_1_1_0());
							}
							lv_fields_7_0=ruleVTMTemplateField
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getVTMTemplateRule());
								}
								add(
									$current,
									"fields",
									lv_fields_7_0,
									"es.uah.aut.srg.micobs.svm.lang.tmtemplate.TMTEMPLATE.VTMTemplateField");
								afterParserOrEnumRuleCall();
							}
						)
					)+
					otherlv_8='</Fields>'
					{
						newLeafNode(otherlv_8, grammarAccess.getVTMTemplateAccess().getFieldsKeyword_5_0_1_2());
					}
				)?
				otherlv_9='</TMTemplate>'
				{
					newLeafNode(otherlv_9, grammarAccess.getVTMTemplateAccess().getTMTemplateKeyword_5_0_2());
				}
			)
			    |
			otherlv_10='/>'
			{
				newLeafNode(otherlv_10, grammarAccess.getVTMTemplateAccess().getSolidusGreaterThanSignKeyword_5_1());
			}
		)
	)
;

// Entry rule entryRuleVTMTemplateField
entryRuleVTMTemplateField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVTMTemplateFieldRule()); }
	iv_ruleVTMTemplateField=ruleVTMTemplateField
	{ $current=$iv_ruleVTMTemplateField.current; }
	EOF;

// Rule VTMTemplateField
ruleVTMTemplateField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='<Field>'
		{
			newLeafNode(otherlv_0, grammarAccess.getVTMTemplateFieldAccess().getFieldKeyword_0());
		}
		otherlv_1='<fieldRef'
		{
			newLeafNode(otherlv_1, grammarAccess.getVTMTemplateFieldAccess().getFieldRefKeyword_1());
		}
		otherlv_2='name='
		{
			newLeafNode(otherlv_2, grammarAccess.getVTMTemplateFieldAccess().getNameKeyword_2());
		}
		(
			(
				{
					/* */
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVTMTemplateFieldRule());
					}
				}
				otherlv_3=RULE_STRING
				{
					newLeafNode(otherlv_3, grammarAccess.getVTMTemplateFieldAccess().getFieldRefTMTCIFTMFieldCrossReference_3_0());
				}
			)
		)
		otherlv_4='/>'
		{
			newLeafNode(otherlv_4, grammarAccess.getVTMTemplateFieldAccess().getSolidusGreaterThanSignKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVTMTemplateFieldAccess().getValueTMTCIFFieldValueParserRuleCall_5_0());
				}
				lv_value_5_0=ruleTMTCIFFieldValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVTMTemplateFieldRule());
					}
					set(
						$current,
						"value",
						lv_value_5_0,
						"es.uah.aut.srg.micobs.svm.lang.tmtemplate.TMTEMPLATE.TMTCIFFieldValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='</Field>'
		{
			newLeafNode(otherlv_6, grammarAccess.getVTMTemplateFieldAccess().getFieldKeyword_6());
		}
	)
;

// Entry rule entryRuleTMTCIFFieldValue
entryRuleTMTCIFFieldValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTMTCIFFieldValueRule()); }
	iv_ruleTMTCIFFieldValue=ruleTMTCIFFieldValue
	{ $current=$iv_ruleTMTCIFFieldValue.current; }
	EOF;

// Rule TMTCIFFieldValue
ruleTMTCIFFieldValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getTMTCIFFieldValueAccess().getTMTCIFFieldValueRawParserRuleCall_0());
		}
		this_TMTCIFFieldValueRaw_0=ruleTMTCIFFieldValueRaw
		{
			$current = $this_TMTCIFFieldValueRaw_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getTMTCIFFieldValueAccess().getTMTCIFFieldValueFileParserRuleCall_1());
		}
		this_TMTCIFFieldValueFile_1=ruleTMTCIFFieldValueFile
		{
			$current = $this_TMTCIFFieldValueFile_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTMTCIFFieldValueRaw
entryRuleTMTCIFFieldValueRaw returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTMTCIFFieldValueRawRule()); }
	iv_ruleTMTCIFFieldValueRaw=ruleTMTCIFFieldValueRaw
	{ $current=$iv_ruleTMTCIFFieldValueRaw.current; }
	EOF;

// Rule TMTCIFFieldValueRaw
ruleTMTCIFFieldValueRaw returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='<FieldValueRaw'
		{
			newLeafNode(otherlv_0, grammarAccess.getTMTCIFFieldValueRawAccess().getFieldValueRawKeyword_0());
		}
		otherlv_1='value='
		{
			newLeafNode(otherlv_1, grammarAccess.getTMTCIFFieldValueRawAccess().getValueKeyword_1());
		}
		(
			(
				(
					lv_value_2_1=RULE_UINT_STRING
					{
						newLeafNode(lv_value_2_1, grammarAccess.getTMTCIFFieldValueRawAccess().getValueUINT_STRINGTerminalRuleCall_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTMTCIFFieldValueRawRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_2_1,
							"es.uah.aut.srg.micobs.svm.lang.tmtemplate.TMTEMPLATE.UINT_STRING");
					}
					    |
					lv_value_2_2=RULE_HEX_STRING
					{
						newLeafNode(lv_value_2_2, grammarAccess.getTMTCIFFieldValueRawAccess().getValueHEX_STRINGTerminalRuleCall_2_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTMTCIFFieldValueRawRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_2_2,
							"es.uah.aut.srg.micobs.svm.lang.tmtemplate.TMTEMPLATE.HEX_STRING");
					}
				)
			)
		)
		otherlv_3='/>'
		{
			newLeafNode(otherlv_3, grammarAccess.getTMTCIFFieldValueRawAccess().getSolidusGreaterThanSignKeyword_3());
		}
	)
;

// Entry rule entryRuleTMTCIFFieldValueFile
entryRuleTMTCIFFieldValueFile returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTMTCIFFieldValueFileRule()); }
	iv_ruleTMTCIFFieldValueFile=ruleTMTCIFFieldValueFile
	{ $current=$iv_ruleTMTCIFFieldValueFile.current; }
	EOF;

// Rule TMTCIFFieldValueFile
ruleTMTCIFFieldValueFile returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='<FieldValueFile'
		{
			newLeafNode(otherlv_0, grammarAccess.getTMTCIFFieldValueFileAccess().getFieldValueFileKeyword_0());
		}
		otherlv_1='filename='
		{
			newLeafNode(otherlv_1, grammarAccess.getTMTCIFFieldValueFileAccess().getFilenameKeyword_1());
		}
		(
			(
				lv_filename_2_0=RULE_STRING
				{
					newLeafNode(lv_filename_2_0, grammarAccess.getTMTCIFFieldValueFileAccess().getFilenameSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTMTCIFFieldValueFileRule());
					}
					setWithLastConsumed(
						$current,
						"filename",
						lv_filename_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_3='/>'
		{
			newLeafNode(otherlv_3, grammarAccess.getTMTCIFFieldValueFileAccess().getSolidusGreaterThanSignKeyword_3());
		}
	)
;

RULE_UINT_STRING : '"' ('0'..'9')+ '"';

RULE_HEX_STRING : '"0x' ('0'..'9'|'a'..'f'|'A'..'F')+ '"';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
