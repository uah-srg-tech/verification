/**
 * Copyright (c) 2019 UAH Space Research Group.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v2.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v20.html
 * 
 * Contributors:
 *     SRG Team - Initial API and implementation
 */
package es.uah.aut.srg.micobs.svm.svs.impl;

import es.uah.aut.srg.micobs.doctpl.doc.DAbstractSection;
import es.uah.aut.srg.micobs.doctpl.doc.impl.DFixedSectionImpl;

import es.uah.aut.srg.micobs.svm.svs.VSVSFixedSection;
import es.uah.aut.srg.micobs.svm.svs.VSVSTaskIdentification;
import es.uah.aut.srg.micobs.svm.svs.svsPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.common.util.ECollections;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>VSVS Task Identification</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link es.uah.aut.srg.micobs.svm.svs.impl.VSVSTaskIdentificationImpl#getTaskCriteria <em>Task Criteria</em>}</li>
 *   <li>{@link es.uah.aut.srg.micobs.svm.svs.impl.VSVSTaskIdentificationImpl#getFeaturesToBeTested <em>Features To Be Tested</em>}</li>
 *   <li>{@link es.uah.aut.srg.micobs.svm.svs.impl.VSVSTaskIdentificationImpl#getFeaturesNotToBeTested <em>Features Not To Be Tested</em>}</li>
 *   <li>{@link es.uah.aut.srg.micobs.svm.svs.impl.VSVSTaskIdentificationImpl#getTestPassFailCriteria <em>Test Pass Fail Criteria</em>}</li>
 *   <li>{@link es.uah.aut.srg.micobs.svm.svs.impl.VSVSTaskIdentificationImpl#getItemsCanNotBeValidated <em>Items Can Not Be Validated</em>}</li>
 *   <li>{@link es.uah.aut.srg.micobs.svm.svs.impl.VSVSTaskIdentificationImpl#getManuallyAutoGeneratedCode <em>Manually Auto Generated Code</em>}</li>
 * </ul>
 *
 * @generated
 */
public class VSVSTaskIdentificationImpl extends DFixedSectionImpl implements VSVSTaskIdentification {
	/**
	 * The cached value of the '{@link #getTaskCriteria() <em>Task Criteria</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getTaskCriteria()
	 * @generated
	 * @ordered
	 */
	protected VSVSFixedSection taskCriteria;

	/**
	 * The cached value of the '{@link #getFeaturesToBeTested() <em>Features To Be Tested</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getFeaturesToBeTested()
	 * @generated
	 * @ordered
	 */
	protected VSVSFixedSection featuresToBeTested;

	/**
	 * The cached value of the '{@link #getFeaturesNotToBeTested() <em>Features Not To Be Tested</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getFeaturesNotToBeTested()
	 * @generated
	 * @ordered
	 */
	protected VSVSFixedSection featuresNotToBeTested;

	/**
	 * The cached value of the '{@link #getTestPassFailCriteria() <em>Test Pass Fail Criteria</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getTestPassFailCriteria()
	 * @generated
	 * @ordered
	 */
	protected VSVSFixedSection testPassFailCriteria;

	/**
	 * The cached value of the '{@link #getItemsCanNotBeValidated() <em>Items Can Not Be Validated</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getItemsCanNotBeValidated()
	 * @generated
	 * @ordered
	 */
	protected VSVSFixedSection itemsCanNotBeValidated;

	/**
	 * The cached value of the '{@link #getManuallyAutoGeneratedCode() <em>Manually Auto Generated Code</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getManuallyAutoGeneratedCode()
	 * @generated
	 * @ordered
	 */
	protected VSVSFixedSection manuallyAutoGeneratedCode;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VSVSTaskIdentificationImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return svsPackage.Literals.VSVS_TASK_IDENTIFICATION;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public VSVSFixedSection getTaskCriteria() {
		return taskCriteria;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetTaskCriteria(VSVSFixedSection newTaskCriteria, NotificationChain msgs) {
		VSVSFixedSection oldTaskCriteria = taskCriteria;
		taskCriteria = newTaskCriteria;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, svsPackage.VSVS_TASK_IDENTIFICATION__TASK_CRITERIA, oldTaskCriteria, newTaskCriteria);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setTaskCriteria(VSVSFixedSection newTaskCriteria) {
		if (newTaskCriteria != taskCriteria) {
			NotificationChain msgs = null;
			if (taskCriteria != null)
				msgs = ((InternalEObject)taskCriteria).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - svsPackage.VSVS_TASK_IDENTIFICATION__TASK_CRITERIA, null, msgs);
			if (newTaskCriteria != null)
				msgs = ((InternalEObject)newTaskCriteria).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - svsPackage.VSVS_TASK_IDENTIFICATION__TASK_CRITERIA, null, msgs);
			msgs = basicSetTaskCriteria(newTaskCriteria, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, svsPackage.VSVS_TASK_IDENTIFICATION__TASK_CRITERIA, newTaskCriteria, newTaskCriteria));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public VSVSFixedSection getFeaturesToBeTested() {
		return featuresToBeTested;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetFeaturesToBeTested(VSVSFixedSection newFeaturesToBeTested, NotificationChain msgs) {
		VSVSFixedSection oldFeaturesToBeTested = featuresToBeTested;
		featuresToBeTested = newFeaturesToBeTested;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, svsPackage.VSVS_TASK_IDENTIFICATION__FEATURES_TO_BE_TESTED, oldFeaturesToBeTested, newFeaturesToBeTested);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setFeaturesToBeTested(VSVSFixedSection newFeaturesToBeTested) {
		if (newFeaturesToBeTested != featuresToBeTested) {
			NotificationChain msgs = null;
			if (featuresToBeTested != null)
				msgs = ((InternalEObject)featuresToBeTested).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - svsPackage.VSVS_TASK_IDENTIFICATION__FEATURES_TO_BE_TESTED, null, msgs);
			if (newFeaturesToBeTested != null)
				msgs = ((InternalEObject)newFeaturesToBeTested).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - svsPackage.VSVS_TASK_IDENTIFICATION__FEATURES_TO_BE_TESTED, null, msgs);
			msgs = basicSetFeaturesToBeTested(newFeaturesToBeTested, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, svsPackage.VSVS_TASK_IDENTIFICATION__FEATURES_TO_BE_TESTED, newFeaturesToBeTested, newFeaturesToBeTested));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public VSVSFixedSection getFeaturesNotToBeTested() {
		return featuresNotToBeTested;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetFeaturesNotToBeTested(VSVSFixedSection newFeaturesNotToBeTested, NotificationChain msgs) {
		VSVSFixedSection oldFeaturesNotToBeTested = featuresNotToBeTested;
		featuresNotToBeTested = newFeaturesNotToBeTested;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, svsPackage.VSVS_TASK_IDENTIFICATION__FEATURES_NOT_TO_BE_TESTED, oldFeaturesNotToBeTested, newFeaturesNotToBeTested);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setFeaturesNotToBeTested(VSVSFixedSection newFeaturesNotToBeTested) {
		if (newFeaturesNotToBeTested != featuresNotToBeTested) {
			NotificationChain msgs = null;
			if (featuresNotToBeTested != null)
				msgs = ((InternalEObject)featuresNotToBeTested).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - svsPackage.VSVS_TASK_IDENTIFICATION__FEATURES_NOT_TO_BE_TESTED, null, msgs);
			if (newFeaturesNotToBeTested != null)
				msgs = ((InternalEObject)newFeaturesNotToBeTested).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - svsPackage.VSVS_TASK_IDENTIFICATION__FEATURES_NOT_TO_BE_TESTED, null, msgs);
			msgs = basicSetFeaturesNotToBeTested(newFeaturesNotToBeTested, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, svsPackage.VSVS_TASK_IDENTIFICATION__FEATURES_NOT_TO_BE_TESTED, newFeaturesNotToBeTested, newFeaturesNotToBeTested));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public VSVSFixedSection getTestPassFailCriteria() {
		return testPassFailCriteria;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetTestPassFailCriteria(VSVSFixedSection newTestPassFailCriteria, NotificationChain msgs) {
		VSVSFixedSection oldTestPassFailCriteria = testPassFailCriteria;
		testPassFailCriteria = newTestPassFailCriteria;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, svsPackage.VSVS_TASK_IDENTIFICATION__TEST_PASS_FAIL_CRITERIA, oldTestPassFailCriteria, newTestPassFailCriteria);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setTestPassFailCriteria(VSVSFixedSection newTestPassFailCriteria) {
		if (newTestPassFailCriteria != testPassFailCriteria) {
			NotificationChain msgs = null;
			if (testPassFailCriteria != null)
				msgs = ((InternalEObject)testPassFailCriteria).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - svsPackage.VSVS_TASK_IDENTIFICATION__TEST_PASS_FAIL_CRITERIA, null, msgs);
			if (newTestPassFailCriteria != null)
				msgs = ((InternalEObject)newTestPassFailCriteria).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - svsPackage.VSVS_TASK_IDENTIFICATION__TEST_PASS_FAIL_CRITERIA, null, msgs);
			msgs = basicSetTestPassFailCriteria(newTestPassFailCriteria, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, svsPackage.VSVS_TASK_IDENTIFICATION__TEST_PASS_FAIL_CRITERIA, newTestPassFailCriteria, newTestPassFailCriteria));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public VSVSFixedSection getItemsCanNotBeValidated() {
		return itemsCanNotBeValidated;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetItemsCanNotBeValidated(VSVSFixedSection newItemsCanNotBeValidated, NotificationChain msgs) {
		VSVSFixedSection oldItemsCanNotBeValidated = itemsCanNotBeValidated;
		itemsCanNotBeValidated = newItemsCanNotBeValidated;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, svsPackage.VSVS_TASK_IDENTIFICATION__ITEMS_CAN_NOT_BE_VALIDATED, oldItemsCanNotBeValidated, newItemsCanNotBeValidated);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setItemsCanNotBeValidated(VSVSFixedSection newItemsCanNotBeValidated) {
		if (newItemsCanNotBeValidated != itemsCanNotBeValidated) {
			NotificationChain msgs = null;
			if (itemsCanNotBeValidated != null)
				msgs = ((InternalEObject)itemsCanNotBeValidated).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - svsPackage.VSVS_TASK_IDENTIFICATION__ITEMS_CAN_NOT_BE_VALIDATED, null, msgs);
			if (newItemsCanNotBeValidated != null)
				msgs = ((InternalEObject)newItemsCanNotBeValidated).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - svsPackage.VSVS_TASK_IDENTIFICATION__ITEMS_CAN_NOT_BE_VALIDATED, null, msgs);
			msgs = basicSetItemsCanNotBeValidated(newItemsCanNotBeValidated, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, svsPackage.VSVS_TASK_IDENTIFICATION__ITEMS_CAN_NOT_BE_VALIDATED, newItemsCanNotBeValidated, newItemsCanNotBeValidated));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public VSVSFixedSection getManuallyAutoGeneratedCode() {
		return manuallyAutoGeneratedCode;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetManuallyAutoGeneratedCode(VSVSFixedSection newManuallyAutoGeneratedCode, NotificationChain msgs) {
		VSVSFixedSection oldManuallyAutoGeneratedCode = manuallyAutoGeneratedCode;
		manuallyAutoGeneratedCode = newManuallyAutoGeneratedCode;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, svsPackage.VSVS_TASK_IDENTIFICATION__MANUALLY_AUTO_GENERATED_CODE, oldManuallyAutoGeneratedCode, newManuallyAutoGeneratedCode);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setManuallyAutoGeneratedCode(VSVSFixedSection newManuallyAutoGeneratedCode) {
		if (newManuallyAutoGeneratedCode != manuallyAutoGeneratedCode) {
			NotificationChain msgs = null;
			if (manuallyAutoGeneratedCode != null)
				msgs = ((InternalEObject)manuallyAutoGeneratedCode).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - svsPackage.VSVS_TASK_IDENTIFICATION__MANUALLY_AUTO_GENERATED_CODE, null, msgs);
			if (newManuallyAutoGeneratedCode != null)
				msgs = ((InternalEObject)newManuallyAutoGeneratedCode).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - svsPackage.VSVS_TASK_IDENTIFICATION__MANUALLY_AUTO_GENERATED_CODE, null, msgs);
			msgs = basicSetManuallyAutoGeneratedCode(newManuallyAutoGeneratedCode, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, svsPackage.VSVS_TASK_IDENTIFICATION__MANUALLY_AUTO_GENERATED_CODE, newManuallyAutoGeneratedCode, newManuallyAutoGeneratedCode));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case svsPackage.VSVS_TASK_IDENTIFICATION__TASK_CRITERIA:
				return basicSetTaskCriteria(null, msgs);
			case svsPackage.VSVS_TASK_IDENTIFICATION__FEATURES_TO_BE_TESTED:
				return basicSetFeaturesToBeTested(null, msgs);
			case svsPackage.VSVS_TASK_IDENTIFICATION__FEATURES_NOT_TO_BE_TESTED:
				return basicSetFeaturesNotToBeTested(null, msgs);
			case svsPackage.VSVS_TASK_IDENTIFICATION__TEST_PASS_FAIL_CRITERIA:
				return basicSetTestPassFailCriteria(null, msgs);
			case svsPackage.VSVS_TASK_IDENTIFICATION__ITEMS_CAN_NOT_BE_VALIDATED:
				return basicSetItemsCanNotBeValidated(null, msgs);
			case svsPackage.VSVS_TASK_IDENTIFICATION__MANUALLY_AUTO_GENERATED_CODE:
				return basicSetManuallyAutoGeneratedCode(null, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case svsPackage.VSVS_TASK_IDENTIFICATION__TASK_CRITERIA:
				return getTaskCriteria();
			case svsPackage.VSVS_TASK_IDENTIFICATION__FEATURES_TO_BE_TESTED:
				return getFeaturesToBeTested();
			case svsPackage.VSVS_TASK_IDENTIFICATION__FEATURES_NOT_TO_BE_TESTED:
				return getFeaturesNotToBeTested();
			case svsPackage.VSVS_TASK_IDENTIFICATION__TEST_PASS_FAIL_CRITERIA:
				return getTestPassFailCriteria();
			case svsPackage.VSVS_TASK_IDENTIFICATION__ITEMS_CAN_NOT_BE_VALIDATED:
				return getItemsCanNotBeValidated();
			case svsPackage.VSVS_TASK_IDENTIFICATION__MANUALLY_AUTO_GENERATED_CODE:
				return getManuallyAutoGeneratedCode();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case svsPackage.VSVS_TASK_IDENTIFICATION__TASK_CRITERIA:
				setTaskCriteria((VSVSFixedSection)newValue);
				return;
			case svsPackage.VSVS_TASK_IDENTIFICATION__FEATURES_TO_BE_TESTED:
				setFeaturesToBeTested((VSVSFixedSection)newValue);
				return;
			case svsPackage.VSVS_TASK_IDENTIFICATION__FEATURES_NOT_TO_BE_TESTED:
				setFeaturesNotToBeTested((VSVSFixedSection)newValue);
				return;
			case svsPackage.VSVS_TASK_IDENTIFICATION__TEST_PASS_FAIL_CRITERIA:
				setTestPassFailCriteria((VSVSFixedSection)newValue);
				return;
			case svsPackage.VSVS_TASK_IDENTIFICATION__ITEMS_CAN_NOT_BE_VALIDATED:
				setItemsCanNotBeValidated((VSVSFixedSection)newValue);
				return;
			case svsPackage.VSVS_TASK_IDENTIFICATION__MANUALLY_AUTO_GENERATED_CODE:
				setManuallyAutoGeneratedCode((VSVSFixedSection)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case svsPackage.VSVS_TASK_IDENTIFICATION__TASK_CRITERIA:
				setTaskCriteria((VSVSFixedSection)null);
				return;
			case svsPackage.VSVS_TASK_IDENTIFICATION__FEATURES_TO_BE_TESTED:
				setFeaturesToBeTested((VSVSFixedSection)null);
				return;
			case svsPackage.VSVS_TASK_IDENTIFICATION__FEATURES_NOT_TO_BE_TESTED:
				setFeaturesNotToBeTested((VSVSFixedSection)null);
				return;
			case svsPackage.VSVS_TASK_IDENTIFICATION__TEST_PASS_FAIL_CRITERIA:
				setTestPassFailCriteria((VSVSFixedSection)null);
				return;
			case svsPackage.VSVS_TASK_IDENTIFICATION__ITEMS_CAN_NOT_BE_VALIDATED:
				setItemsCanNotBeValidated((VSVSFixedSection)null);
				return;
			case svsPackage.VSVS_TASK_IDENTIFICATION__MANUALLY_AUTO_GENERATED_CODE:
				setManuallyAutoGeneratedCode((VSVSFixedSection)null);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case svsPackage.VSVS_TASK_IDENTIFICATION__TASK_CRITERIA:
				return taskCriteria != null;
			case svsPackage.VSVS_TASK_IDENTIFICATION__FEATURES_TO_BE_TESTED:
				return featuresToBeTested != null;
			case svsPackage.VSVS_TASK_IDENTIFICATION__FEATURES_NOT_TO_BE_TESTED:
				return featuresNotToBeTested != null;
			case svsPackage.VSVS_TASK_IDENTIFICATION__TEST_PASS_FAIL_CRITERIA:
				return testPassFailCriteria != null;
			case svsPackage.VSVS_TASK_IDENTIFICATION__ITEMS_CAN_NOT_BE_VALIDATED:
				return itemsCanNotBeValidated != null;
			case svsPackage.VSVS_TASK_IDENTIFICATION__MANUALLY_AUTO_GENERATED_CODE:
				return manuallyAutoGeneratedCode != null;
		}
		return super.eIsSet(featureID);
	}
	
	@Override
	public EList<DAbstractSection> getSubsections() {
		return ECollections.emptyEList();
	}

} //VSVSTaskIdentificationImpl
