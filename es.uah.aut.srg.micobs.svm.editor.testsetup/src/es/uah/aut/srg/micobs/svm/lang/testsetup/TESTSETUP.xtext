grammar es.uah.aut.srg.micobs.svm.lang.testsetup.TESTSETUP with org.eclipse.xtext.common.Terminals

import "http://srg.aut.uah.es/micobs/svm/testsetup" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://srg.aut.uah.es/micobs/doctpl/doctpl" as doctpl
import "http://srg.aut.uah.es/tmtcif/tcheader" as tcheader
import "http://srg.aut.uah.es/tmtcif/tmheader" as tmheader
import "http://srg.aut.uah.es/tmtcif/scenario" as scenario

VTestSetupDocument returns VTestSetupDocument:
	'<TestSetup'
		'name=' name=STRING
		'id=' id=STRING
		'issue=' issue=UINT_STRING
		'revision=' revision=UINT_STRING
		'date=' date=STRING
		'>'
		applicableDocumentsSection=VTestSetupApplicableDocuments
		referenceDocumentsSection=VTestSetupReferenceDocuments
		'<Interfaces>' interfaces=VTestSetupInterfacesSection '</Interfaces>'
		('<PacketConfigurations>' configurations=VTestSetupPacketConfigurationsSection '</PacketConfigurations>')?
		('<Actions>' actions=VTestSetupActionsSection '</Actions>')?
		'<Scenarios>' scenarios=VTestSetupScenariosSection '</Scenarios>'
	'</TestSetup>';

VTestSetupApplicableDocuments returns VTestSetupApplicableDocuments:
	{VTestSetupApplicableDocuments}
	'<ApplicableDocuments>'
		(applicableDocuments+=DApplicableDocument)*
	'</ApplicableDocuments>';

VTestSetupReferenceDocuments returns VTestSetupReferenceDocuments:
	{VTestSetupReferenceDocuments}
	'<ReferenceDocuments>'
		(referenceDocuments+=DReferenceDocument)*
	'</ReferenceDocuments>';

DApplicableDocument returns doctpl::DApplicableDocument:
	'<ApplicableDocument'
		'name=' name=STRING
		'title=' title=STRING
		'id=' id=STRING
		('issue=' issue=UINT_STRING
		('revision=' revision=UINT_STRING)?)?
		('date=' date=STRING)?
	'/>';

DReferenceDocument returns doctpl::DReferenceDocument:
	'<ReferenceDocument'
		'name=' name=STRING
		'title=' title=STRING
		'id=' id=STRING
		('issue=' issue=UINT_STRING
		('revision=' revision=UINT_STRING)?)?
		('date=' date=STRING)?
	'/>';

VTestSetupInterfacesSection returns VTestSetupInterfacesSection:
{VTestSetupInterfacesSection}
	(interfaces+=VTestSetupInterface)+;

VTestSetupInterface returns VTestSetupInterface:
	'<Interface'
		'name=' name=STRING
		'tcHeader=' tcHeader=[tcheader::TMTCIFTCHeader|STRING]
		'tmHeader=' tmHeader=[tmheader::TMTCIFTMHeader|STRING]
		'>'
		description=DRun
	'</Interface>';

VTestSetupPacketConfigurationsSection returns VTestSetupPacketConfigurationsSection:
{VTestSetupPacketConfigurationsSection}
	(packetConfigurations+=VTestSetupPacketConfiguration)+;

VTestSetupPacketConfiguration returns VTestSetupPacketConfiguration:
	'<PacketConfiguration'
		'name=' name=STRING
		'id=' id=UINT_STRING
		'>'
		description=DRun
	'</PacketConfiguration>';

VTestSetupActionsSection returns VTestSetupActionsSection:
{VTestSetupActionsSection}
	(action+=VTestSetupAction)+;

VTestSetupAction returns VTestSetupAction:
	'<Action'
		'name=' name=STRING
		'type=' type=VTestSetupActionType
		'>'
		description=DBody
	'</Action>';

enum VTestSetupActionType returns VTestSetupActionType:
	checking = '"checking"' | instruction = '"instruction"';

VTestSetupScenariosSection returns VTestSetupScenariosSection:
{VTestSetupScenariosSection}
	(scenarios+=VTestSetupScenarioSection)+;

VTestSetupScenarioSection returns VTestSetupScenarioSection:
	'<Scenario'
		'name=' name=STRING
		'scenario=' scenario=[scenario::TMTCIFScenario|STRING]
		'>'
		(supportedInterface+=VTestSetupSupportedInterface)*
		(selectedConfiguration+=VTestSetupSelectedConfiguration)*
		('<Action' 'ref=' supportedAction+=[VTestSetupAction|STRING] '/>')*
		body=DBody
	'</Scenario>';

VTestSetupSupportedInterface returns VTestSetupSupportedInterface:
	'<Interface'
		'name=' name=STRING
		'ref=' interface=[VTestSetupInterface|STRING]
		'scenarioInterface=' scenarioInterface=[scenario::TMTCIFScenarioInterface|STRING]
	'/>';

VTestSetupSelectedConfiguration returns VTestSetupSelectedConfiguration:
	'<Configuration'
		'ref=' configuration=[VTestSetupPacketConfiguration|STRING]
		'defaultFilterStatus=' defaultFilterStatus=VTestSetupConfigurationStatus
		'defaultPrintStatus=' defaultPrintStatus=VTestSetupConfigurationStatus
		'/>'
;

enum VTestSetupConfigurationStatus returns VTestSetupConfigurationStatus:
	off = '"off"' | on = '"on"';

DBody returns doctpl::DBody:
	'<body>'
		(bodyContent+=DBodyContent)+
	'</body>';

DBodyContent returns doctpl::DBodyContent:
	DParagraph | DItemize | DEnumerate | DFigureFromFile | DTableFromFile | DBasicTable;

enum DAlignment returns doctpl::DAlignment:
	left = '"left"' | center = '"center"' | right = '"right"' | justified = '"justified"';

DParagraph returns doctpl::DParagraph:
	'<paragraph'
		('name=' name=STRING)?
		('alignment=' alignment=DAlignment)?
		('style=' style=STRING)?
		('indent=' indent=REAL_STRING)?
		'>'
		(paragraphContent+=DParagraphContent)+ 
	'</paragraph>';

DListItem returns doctpl::DListItem:
{doctpl::DListItem}
	'<listItem>'
		(paragraph=DParagraph)?
		('<sublist>' sublist=DListContent '</sublist>')?
	'</listItem>';

DListContent returns doctpl::DListContent:
	DItemize | DEnumerate;

DItemize returns doctpl::DItemize:
	'<itemize'
		('name=' name=STRING)?
		('alignment=' alignment=DAlignment)?
		('style=' style=STRING)?
		('indent=' indent=REAL_STRING)?
		'>'
		(items+=DListItem)+ 
	'</itemize>';

DEnumerate returns doctpl::DEnumerate:
	'<enumerate'
		('name=' name=STRING)?
		('alignment=' alignment=DAlignment)?
		('style=' style=STRING)?
		('indent=' indent=REAL_STRING)?
		'>'
		(items+=DListItem)+ 
	'</enumerate>';

DParagraphContent returns doctpl::DParagraphContent:
	DRun | DHyperlink;

enum DRunAttributes returns doctpl::DRunAttributes:
	TRUE = '"true"' | FALSE = '"false"';

DRun returns doctpl::DRun:
	'<run'
		('bold=' bold=DRunAttributes)?
		('italics=' italics=DRunAttributes)?
		('underline=' underline=DRunAttributes)?
		('color=' color=STRING)?
	'>'
		(tab=DTab)?
		text=DText
	'</run>';

DHyperlink returns doctpl::DHyperlink:
	'<hyperlink'
		'reference=' reference=[doctpl::DReferenceableObject|STRING]
	'>'
		(run=DRun)?
	'</hyperlink>';

DTab returns doctpl::DTab:
{doctpl::DTab}
    '<tab/>';
		
DText returns doctpl::DText:
	content=RUNTEXT;

terminal RUNTEXT returns ecore::EString:
    '<text>' -> '</text>';

DFigureFromFile returns doctpl::DFigureFromFile:
	'<figureFromFile'
		'name=' name=STRING
		'referenceFile=' referenceFile=STRING
		'width=' width=UINT_STRING
		'height=' height=UINT_STRING
		('alignment=' alignment=DAlignment)?
		('style=' style=STRING)?
		('indent=' indent=REAL_STRING)?
		('caption=' caption=STRING)?
	'/>';

DTableFromFile returns doctpl::DTableFromFile:
	'<tableFromFile'
		'name=' name=STRING
		'referenceFile=' referenceFile=STRING
		'width=' width=UINT_STRING
		'height=' height=UINT_STRING
		('alignment=' alignment=DAlignment)?
		('style=' style=STRING)?
		('indent=' indent=REAL_STRING)?
		('caption=' caption=STRING)?
	'/>';

DBasicTable returns doctpl::DBasicTable: 
	'<basicTable'
		'name=' name=STRING
		('width=' width=UINT_STRING)?
		('alignment=' alignment=DAlignment)?
		('style=' style=STRING)?
		('indent=' indent=REAL_STRING)?
		('caption=' caption=STRING)?
	'>'
		(rows+=DRow)+
	'</basicTable>';

DRow returns doctpl::DRow:
	'<row>'
		(cells+=DCell)+
	'</row>';

DCell returns doctpl::DCell:
	'<cell'
		('colSpan=' colSpan=UINT_STRING)?
		('rowSpan=' rowSpan=UINT_STRING)?
		('width=' width=UINT_STRING)?
		('shadow=' shadow=STRING)?
	'>'
		(bodyContent+=DBodyContent)+
	'</cell>';

terminal UINT_STRING returns ecore::EString:
	('"' ('0'..'9')+ '"');
	
terminal REAL_STRING returns ecore::EString:
	('"' ('0'..'9')+ ('.' ('0'..'9')+)? '"');